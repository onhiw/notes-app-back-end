{
	"info": {
		"_postman_id": "787ee911-a6b6-420c-8575-80463e32a20f",
		"name": "Latihan",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7436061"
	},
	"item": [
		{
			"name": "GET ALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should an object', () => {",
							"   const responseJson = pm.response.json();",
							"   pm.expect(responseJson).to.be.an('object');",
							"}); ",
							"",
							"pm.test('response body should have the correct property and value', () => {",
							"  const responseJson = pm.response.json();",
							"   pm.expect(responseJson).to.have.ownProperty('status');",
							"   pm.expect(responseJson.status).to.equals('success');",
							"   pm.expect(responseJson).to.have.ownProperty('data');",
							"   pm.expect(responseJson.data).to.be.an('object');",
							"}); ",
							"",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {",
							"   const responseJson = pm.response.json();",
							"   const { data } = responseJson;",
							" ",
							"   pm.expect(data).to.have.ownProperty('notes');",
							"   pm.expect(data.notes).to.be.an('array');",
							"   pm.expect(data.notes).lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "ADD NOTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {",
							"   pm.response.to.have.status(201);",
							"}); ",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan B\",\n    \"tags\": [\"Android\", \"Web\"],\n    \"body\": \"Isi dari catatan B\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "SINGLE NOTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"  pm.response.to.have.status(200);",
							"}); ",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"   const responseJson = pm.response.json();",
							"   pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have the correct property and value', () => {",
							"   const responseJson = pm.response.json();",
							" ",
							"   pm.expect(responseJson).to.have.ownProperty('status');",
							"   pm.expect(responseJson.status).to.equals('success');",
							"   pm.expect(responseJson).to.have.ownProperty('data');",
							"   pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should contain note object', () => {",
							"   const responseJson = pm.response.json();",
							"   const { data } = responseJson;",
							" ",
							"   pm.expect(data).to.have.ownProperty('note');",
							"   pm.expect(data.note).to.be.an('object');",
							"});",
							"",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {",
							"   const responseJson = pm.response.json();",
							"   const { data: { note } } = responseJson;",
							" ",
							"   const expectedId = pm.environment.get('noteId');",
							"   const expectedTitle = 'Catatan A';",
							"   const expectedTags = ['Android', 'Web'];",
							"   const expectedBody = 'Isi dari catatan A';",
							" ",
							"   pm.expect(note).to.have.ownProperty('id');",
							"   pm.expect(note.id).to.equals(expectedId);",
							" ",
							"   pm.expect(note).to.have.ownProperty('title');",
							"   pm.expect(note.title).to.equals(expectedTitle);",
							" ",
							"   pm.expect(note).to.have.ownProperty('tags');",
							"   pm.expect(note.tags).to.eql(expectedTags);",
							" ",
							"   pm.expect(note).to.have.ownProperty('body');",
							"   pm.expect(note.body).to.equals(expectedBody);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/notes/{{noteid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"notes",
						"{{noteid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "EDIT NOTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response Content-Type header should have application/json value', () => {",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"   const responseJson = pm.response.json();",
							"   pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"   const responseJson = pm.response.json();",
							" ",
							"   pm.expect(responseJson).to.have.ownProperty('status');",
							"   pm.expect(responseJson.status).to.equals('success');",
							"   pm.expect(responseJson).to.have.ownProperty('message');",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan B Revisi\",\n    \"tags\": [\"Android\", \"Web\"],\n    \"body\": \"Isi dari catatan B\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/notes/{{noteid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"notes",
						"{{noteid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE NOTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
							"}); ",
							"",
							"pm.test('response body should be an object', () => {",
							"   const responseJson = pm.response.json();",
							"   pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"   const responseJson = pm.response.json();",
							" ",
							"   pm.expect(responseJson).to.have.ownProperty('status');",
							"   pm.expect(responseJson.status).to.equals('success');",
							"   pm.expect(responseJson).to.have.ownProperty('message');",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/notes/{{noteid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"notes",
						"{{noteid}}"
					]
				}
			},
			"response": []
		}
	]
}